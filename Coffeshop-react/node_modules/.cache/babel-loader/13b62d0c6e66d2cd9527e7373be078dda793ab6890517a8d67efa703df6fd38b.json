{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prisc\\\\coffeeshop-react\\\\src\\\\components\\\\AdminDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tabs, Tab, Container, Button } from 'react-bootstrap';\nimport UserTable from './UserTable';\nimport ProductTable from './ProductTable';\nimport ProductForm from './ProductForm';\nimport UserForm from './UserForm'; // Asumo que tienes un UserForm para crear/editar usuarios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminDashboard = () => {\n  _s();\n  // 1. Hook useState para forzar la recarga de las tablas\n  const [refreshKey, setRefreshKey] = useState(0);\n  const [view, setView] = useState('list');\n  const [productToEdit, setProductToEdit] = useState(null);\n\n  // Función que incrementa la clave para forzar la recarga de todas las tablas\n  const forceRefresh = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n\n  // La función que maneja el envío del formulario de producto\n  const handleProductSubmit = () => {\n    setProductToEdit(null);\n    setView('list');\n    forceRefresh(); // << FORZAR RECARGA DESPUÉS DE GUARDAR PRODUCTO\n  };\n\n  // Función para manejar el envío del formulario de usuario\n  const handleUserSubmit = () => {\n    setView('list');\n    forceRefresh(); // << FORZAR RECARGA DESPUÉS DE GUARDAR USUARIO\n  };\n\n  // ... (El resto de la función renderProductView omitida por brevedad) ...\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"my-5\",\n    children: /*#__PURE__*/_jsxDEV(Tabs, {\n      defaultActiveKey: \"usuarios\",\n      id: \"admin-tabs\",\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"usuarios\",\n        title: \"Gesti\\xF3n de Usuarios\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mt-3\",\n          children: \"Gesti\\xF3n de Clientes y Roles\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          className: \"my-3\",\n          onClick: () => setView('user-form'),\n          children: \"+ Crear Nuevo Usuario\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), view === 'user-form' ?\n        /*#__PURE__*/\n        // Asumo que tu formulario de usuario llama a handleUserSubmit al finalizar\n        _jsxDEV(UserForm, {\n          onSubmit: handleUserSubmit,\n          onCancel: () => setView('list')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this) :\n        /*#__PURE__*/\n        // ⬇️ UserTable AHORA RECIBE la clave de actualización ⬇️\n        _jsxDEV(UserTable, {\n          refreshKey: refreshKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        eventKey: \"productos\",\n        title: \"Gesti\\xF3n de Productos\",\n        children: /*#__PURE__*/_jsxDEV(ProductTable, {\n          onEdit: handleEditProduct,\n          refreshKey: refreshKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(AdminDashboard, \"ekxDqZJ2EH/RILDWHotthZgX7Ak=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","Tabs","Tab","Container","Button","UserTable","ProductTable","ProductForm","UserForm","jsxDEV","_jsxDEV","AdminDashboard","_s","refreshKey","setRefreshKey","view","setView","productToEdit","setProductToEdit","forceRefresh","prev","handleProductSubmit","handleUserSubmit","className","children","defaultActiveKey","id","eventKey","title","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","onSubmit","onCancel","onEdit","handleEditProduct","_c","$RefreshReg$"],"sources":["C:/Users/prisc/coffeeshop-react/src/components/AdminDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Tabs, Tab, Container, Button } from 'react-bootstrap';\r\nimport UserTable from './UserTable'; \r\nimport ProductTable from './ProductTable'; \r\nimport ProductForm from './ProductForm';\r\nimport UserForm from './UserForm'; // Asumo que tienes un UserForm para crear/editar usuarios\r\n\r\nconst AdminDashboard = () => {\r\n    // 1. Hook useState para forzar la recarga de las tablas\r\n    const [refreshKey, setRefreshKey] = useState(0); \r\n    const [view, setView] = useState('list'); \r\n    const [productToEdit, setProductToEdit] = useState(null); \r\n\r\n    // Función que incrementa la clave para forzar la recarga de todas las tablas\r\n    const forceRefresh = () => {\r\n        setRefreshKey(prev => prev + 1);\r\n    };\r\n\r\n    // La función que maneja el envío del formulario de producto\r\n    const handleProductSubmit = () => {\r\n        setProductToEdit(null);\r\n        setView('list'); \r\n        forceRefresh(); // << FORZAR RECARGA DESPUÉS DE GUARDAR PRODUCTO\r\n    };\r\n\r\n    // Función para manejar el envío del formulario de usuario\r\n    const handleUserSubmit = () => {\r\n        setView('list');\r\n        forceRefresh(); // << FORZAR RECARGA DESPUÉS DE GUARDAR USUARIO\r\n    };\r\n\r\n    // ... (El resto de la función renderProductView omitida por brevedad) ...\r\n    \r\n    return (\r\n        <Container className=\"my-5\">\r\n            {/* ... (Título y Tabs omitidos) ... */}\r\n            \r\n            <Tabs defaultActiveKey=\"usuarios\" id=\"admin-tabs\" className=\"mb-3\">\r\n                \r\n                {/* Pestaña de Usuarios */}\r\n                <Tab eventKey=\"usuarios\" title=\"Gestión de Usuarios\">\r\n                    <h3 className=\"mt-3\">Gestión de Clientes y Roles</h3>\r\n                    {/* Botón para crear nuevo usuario */}\r\n                    <Button variant=\"primary\" className=\"my-3\" onClick={() => setView('user-form')}>+ Crear Nuevo Usuario</Button>\r\n                    \r\n                    {/* Renderiza el formulario o la tabla */}\r\n                    {view === 'user-form' ? (\r\n                        // Asumo que tu formulario de usuario llama a handleUserSubmit al finalizar\r\n                        <UserForm onSubmit={handleUserSubmit} onCancel={() => setView('list')} /> \r\n                    ) : (\r\n                        // ⬇️ UserTable AHORA RECIBE la clave de actualización ⬇️\r\n                        <UserTable refreshKey={refreshKey} /> \r\n                    )}\r\n                </Tab>\r\n                \r\n                {/* Pestaña de Productos */}\r\n                <Tab eventKey=\"productos\" title=\"Gestión de Productos\">\r\n                    {/* ... (Lógica que llama a ProductTable y ProductForm con la clave) ... */}\r\n                    <ProductTable onEdit={handleEditProduct} refreshKey={refreshKey} /> \r\n                </Tab>\r\n            </Tabs>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}