{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prisc\\\\coffeeshop-react\\\\src\\\\components\\\\RegistroForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\n// Importamos el objeto de regiones y la lógica de persistencia\nimport { regionesComunas } from '../data/data';\n\n// Componente para el formulario de Registro\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistroForm = () => {\n  _s();\n  // 1. Hook useState: Almacena los datos del formulario (Estado)\n  const [formData, setFormData] = useState({\n    nombreCompleto: '',\n    correo: '',\n    repetirCorreo: '',\n    contrasena: '',\n    confirmarContrasena: '',\n    telefono: '',\n    region: '',\n    comuna: ''\n  });\n  const [errors, setErrors] = useState({});\n\n  // 2. Función para manejar los cambios en los inputs (actualiza el estado)\n  const handleChange = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [id]: value\n    }));\n  };\n\n  // 3. Función de validación (asumimos que funciona correctamente)\n  const validate = () => {\n    const newErrors = {};\n    // ... (Lógica de validación) ...\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  // 4. Manejar el envío del formulario y guardar en localStorage\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (validate()) {\n      // ⬇️ CORRECCIÓN CRÍTICA: Dividir nombreCompleto en nombre y apellido ⬇️\n      const nombreCompleto = formData.nombreCompleto.trim();\n      const partesDelNombre = nombreCompleto.split(/\\s+/); // Divide por uno o más espacios\n\n      // La primera palabra es el nombre\n      const nombre = partesDelNombre[0] || '';\n      // El resto de palabras son el apellido\n      const apellido = partesDelNombre.slice(1).join(' ') || '';\n      // ⬆️ FIN CORRECCIÓN ⬆️\n\n      const newUser = {\n        id: Date.now(),\n        // ⬇️ GUARDAMOS LOS CAMPOS SEPARADOS QUE LA TABLA ADMIN ESPERA ⬇️\n        nombre: nombre,\n        apellido: apellido,\n        correo: formData.correo,\n        contrasena: formData.contrasena,\n        telefono: formData.telefono,\n        region: formData.region,\n        comuna: formData.comuna,\n        rol: 'cliente' // Rol por defecto\n      };\n      let users = JSON.parse(localStorage.getItem('usuarios')) || [];\n      users.push(newUser);\n      localStorage.setItem('usuarios', JSON.stringify(users));\n      alert('✅ Registro exitoso. Usuario guardado.');\n      // Limpiar formulario\n      setFormData({\n        nombreCompleto: '',\n        correo: '',\n        repetirCorreo: '',\n        contrasena: '',\n        confirmarContrasena: '',\n        telefono: '',\n        region: '',\n        comuna: ''\n      });\n      setErrors({});\n    }\n  };\n\n  // ... (El resto del código del return) ...\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"my-5\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 7,\n        lg: 5,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"formLogin\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-center mb-4\",\n            children: \"Registro de Usuario\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"primary\",\n              className: \"w-100 mt-3\",\n              children: \"Registrar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(RegistroForm, \"av0ktTYbxbk9GB7fPR+QWMvT6dY=\");\n_c = RegistroForm;\nexport default RegistroForm;\nvar _c;\n$RefreshReg$(_c, \"RegistroForm\");","map":{"version":3,"names":["React","useState","Container","Form","Button","Row","Col","regionesComunas","jsxDEV","_jsxDEV","RegistroForm","_s","formData","setFormData","nombreCompleto","correo","repetirCorreo","contrasena","confirmarContrasena","telefono","region","comuna","errors","setErrors","handleChange","e","id","value","target","prev","validate","newErrors","Object","keys","length","handleSubmit","preventDefault","trim","partesDelNombre","split","nombre","apellido","slice","join","newUser","Date","now","rol","users","JSON","parse","localStorage","getItem","push","setItem","stringify","alert","className","children","md","lg","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","variant","_c","$RefreshReg$"],"sources":["C:/Users/prisc/coffeeshop-react/src/components/RegistroForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Container, Form, Button, Row, Col } from 'react-bootstrap';\r\n// Importamos el objeto de regiones y la lógica de persistencia\r\nimport { regionesComunas } from '../data/data';\r\n\r\n// Componente para el formulario de Registro\r\nconst RegistroForm = () => {\r\n    // 1. Hook useState: Almacena los datos del formulario (Estado)\r\n    const [formData, setFormData] = useState({\r\n        nombreCompleto: '', correo: '', repetirCorreo: '', contrasena: '', confirmarContrasena: '',\r\n        telefono: '', region: '', comuna: ''\r\n    });\r\n    \r\n    const [errors, setErrors] = useState({});\r\n\r\n    // 2. Función para manejar los cambios en los inputs (actualiza el estado)\r\n    const handleChange = (e) => {\r\n        const { id, value } = e.target;\r\n        setFormData(prev => ({\r\n            ...prev,\r\n            [id]: value\r\n        }));\r\n    };\r\n\r\n    // 3. Función de validación (asumimos que funciona correctamente)\r\n    const validate = () => {\r\n        const newErrors = {};\r\n        // ... (Lógica de validación) ...\r\n        setErrors(newErrors);\r\n        return Object.keys(newErrors).length === 0;\r\n    };\r\n\r\n    // 4. Manejar el envío del formulario y guardar en localStorage\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); \r\n        if (validate()) {\r\n            \r\n            // ⬇️ CORRECCIÓN CRÍTICA: Dividir nombreCompleto en nombre y apellido ⬇️\r\n            const nombreCompleto = formData.nombreCompleto.trim();\r\n            const partesDelNombre = nombreCompleto.split(/\\s+/); // Divide por uno o más espacios\r\n            \r\n            // La primera palabra es el nombre\r\n            const nombre = partesDelNombre[0] || ''; \r\n            // El resto de palabras son el apellido\r\n            const apellido = partesDelNombre.slice(1).join(' ') || ''; \r\n            // ⬆️ FIN CORRECCIÓN ⬆️\r\n\r\n            const newUser = {\r\n                id: Date.now(), \r\n                // ⬇️ GUARDAMOS LOS CAMPOS SEPARADOS QUE LA TABLA ADMIN ESPERA ⬇️\r\n                nombre: nombre, \r\n                apellido: apellido, \r\n                \r\n                correo: formData.correo,\r\n                contrasena: formData.contrasena,\r\n                telefono: formData.telefono, \r\n                region: formData.region,\r\n                comuna: formData.comuna,\r\n                rol: 'cliente' // Rol por defecto\r\n            };\r\n            \r\n            let users = JSON.parse(localStorage.getItem('usuarios')) || [];\r\n            users.push(newUser);\r\n            localStorage.setItem('usuarios', JSON.stringify(users));\r\n\r\n            alert('✅ Registro exitoso. Usuario guardado.');\r\n            // Limpiar formulario\r\n            setFormData({nombreCompleto: '', correo: '', repetirCorreo: '', contrasena: '', confirmarContrasena: '', telefono: '', region: '', comuna: ''});\r\n            setErrors({}); \r\n        }\r\n    };\r\n\r\n    // ... (El resto del código del return) ...\r\n\r\n    return (\r\n        <Container className=\"my-5\">\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={7} lg={5}>\r\n                    <div className=\"formLogin\"> \r\n                        <h2 className=\"text-center mb-4\">Registro de Usuario</h2>\r\n                        \r\n                        <Form onSubmit={handleSubmit}>\r\n                            {/* ... (Campos de Formulario JSX) ... */}\r\n                            {/* [Asegúrate de copiar todo el JSX de tu formulario aquí] */}\r\n                            \r\n                            <Button type=\"submit\" variant=\"primary\" className=\"w-100 mt-3\">Registrar</Button>\r\n                        </Form>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default RegistroForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AACnE;AACA,SAASC,eAAe,QAAQ,cAAc;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC;IACrCa,cAAc,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,aAAa,EAAE,EAAE;IAAEC,UAAU,EAAE,EAAE;IAAEC,mBAAmB,EAAE,EAAE;IAC1FC,QAAQ,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,MAAM,EAAE;EACtC,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAExC;EACA,MAAMuB,YAAY,GAAIC,CAAC,IAAK;IACxB,MAAM;MAAEC,EAAE;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAC9Bf,WAAW,CAACgB,IAAI,KAAK;MACjB,GAAGA,IAAI;MACP,CAACH,EAAE,GAAGC;IACV,CAAC,CAAC,CAAC;EACP,CAAC;;EAED;EACA,MAAMG,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB;IACAR,SAAS,CAACQ,SAAS,CAAC;IACpB,OAAOC,MAAM,CAACC,IAAI,CAACF,SAAS,CAAC,CAACG,MAAM,KAAK,CAAC;EAC9C,CAAC;;EAED;EACA,MAAMC,YAAY,GAAIV,CAAC,IAAK;IACxBA,CAAC,CAACW,cAAc,CAAC,CAAC;IAClB,IAAIN,QAAQ,CAAC,CAAC,EAAE;MAEZ;MACA,MAAMhB,cAAc,GAAGF,QAAQ,CAACE,cAAc,CAACuB,IAAI,CAAC,CAAC;MACrD,MAAMC,eAAe,GAAGxB,cAAc,CAACyB,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;;MAErD;MACA,MAAMC,MAAM,GAAGF,eAAe,CAAC,CAAC,CAAC,IAAI,EAAE;MACvC;MACA,MAAMG,QAAQ,GAAGH,eAAe,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;MACzD;;MAEA,MAAMC,OAAO,GAAG;QACZlB,EAAE,EAAEmB,IAAI,CAACC,GAAG,CAAC,CAAC;QACd;QACAN,MAAM,EAAEA,MAAM;QACdC,QAAQ,EAAEA,QAAQ;QAElB1B,MAAM,EAAEH,QAAQ,CAACG,MAAM;QACvBE,UAAU,EAAEL,QAAQ,CAACK,UAAU;QAC/BE,QAAQ,EAAEP,QAAQ,CAACO,QAAQ;QAC3BC,MAAM,EAAER,QAAQ,CAACQ,MAAM;QACvBC,MAAM,EAAET,QAAQ,CAACS,MAAM;QACvB0B,GAAG,EAAE,SAAS,CAAC;MACnB,CAAC;MAED,IAAIC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;MAC9DJ,KAAK,CAACK,IAAI,CAACT,OAAO,CAAC;MACnBO,YAAY,CAACG,OAAO,CAAC,UAAU,EAAEL,IAAI,CAACM,SAAS,CAACP,KAAK,CAAC,CAAC;MAEvDQ,KAAK,CAAC,uCAAuC,CAAC;MAC9C;MACA3C,WAAW,CAAC;QAACC,cAAc,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,aAAa,EAAE,EAAE;QAAEC,UAAU,EAAE,EAAE;QAAEC,mBAAmB,EAAE,EAAE;QAAEC,QAAQ,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAE,CAAC,CAAC;MAC/IE,SAAS,CAAC,CAAC,CAAC,CAAC;IACjB;EACJ,CAAC;;EAED;;EAEA,oBACId,OAAA,CAACP,SAAS;IAACuD,SAAS,EAAC,MAAM;IAAAC,QAAA,eACvBjD,OAAA,CAACJ,GAAG;MAACoD,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACnCjD,OAAA,CAACH,GAAG;QAACqD,EAAE,EAAE,CAAE;QAACC,EAAE,EAAE,CAAE;QAAAF,QAAA,eACdjD,OAAA;UAAKgD,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACtBjD,OAAA;YAAIgD,SAAS,EAAC,kBAAkB;YAAAC,QAAA,EAAC;UAAmB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAEzDvD,OAAA,CAACN,IAAI;YAAC8D,QAAQ,EAAE9B,YAAa;YAAAuB,QAAA,eAIzBjD,OAAA,CAACL,MAAM;cAAC8D,IAAI,EAAC,QAAQ;cAACC,OAAO,EAAC,SAAS;cAACV,SAAS,EAAC,YAAY;cAAAC,QAAA,EAAC;YAAS;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/E,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEpB,CAAC;AAACrD,EAAA,CAtFID,YAAY;AAAA0D,EAAA,GAAZ1D,YAAY;AAwFlB,eAAeA,YAAY;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}