{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prisc\\\\coffeeshop-react\\\\src\\\\components\\\\UserTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DynamicDataGrid from './DynamicDataGrid'; // Importar el componente  reutilizar\nimport { getUsersLS } from '../data/data'; // Función para leer datos\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserTable = () => {\n  _s();\n  // 1. Hook useState: Almacena la lista de usuarios en el estado del componente\n  const [users, setUsers] = useState([]);\n\n  // 2. Hook useEffect: Carga los usuarios del localStorage al montar el componente\n  useEffect(() => {\n    const storedUsers = getUsersLS();\n\n    // Formatear los datos para el DynamicDataGrid\n    const mappedUsers = storedUsers.map((user, index) => ({\n      ID: user.rut || index + 1,\n      // Usar RUT como ID principal si existe\n      Nombre: user.nombre,\n      Apellido: user.apellido,\n      Correo: user.email || user.correo,\n      Rol: user.rol || user.tipoUsuario || 'cliente'\n      // NOTA: Para las acciones de Editar/Eliminar, se usaría un componente de celda personalizado.\n    }));\n    setUsers(mappedUsers);\n  }, []); // El array vacío [] asegura que solo se ejecuta una vez\n\n  // 3. Renderizado condicional\n  if (users.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"my-4 text-center text-danger\",\n      children: \"No hay usuarios registrados en la base de datos (localStorage).\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  }\n\n  // 4. Renderizar el DynamicDataGrid con los datos del estado\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(DynamicDataGrid, {\n      data: users,\n      title: \"Lista de Usuarios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_s(UserTable, \"JadZszbqna06PpJs9hMo7Hl/LOY=\");\n_c = UserTable;\nexport default UserTable;\nvar _c;\n$RefreshReg$(_c, \"UserTable\");","map":{"version":3,"names":["React","useState","useEffect","DynamicDataGrid","getUsersLS","jsxDEV","_jsxDEV","UserTable","_s","users","setUsers","storedUsers","mappedUsers","map","user","index","ID","rut","Nombre","nombre","Apellido","apellido","Correo","email","correo","Rol","rol","tipoUsuario","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","data","title","_c","$RefreshReg$"],"sources":["C:/Users/prisc/coffeeshop-react/src/components/UserTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DynamicDataGrid from './DynamicDataGrid';// Importar el componente  reutilizar\r\nimport { getUsersLS } from '../data/data'; // Función para leer datos\r\n\r\nconst UserTable = () => {\r\n    // 1. Hook useState: Almacena la lista de usuarios en el estado del componente\r\n    const [users, setUsers] = useState([]);\r\n\r\n    // 2. Hook useEffect: Carga los usuarios del localStorage al montar el componente\r\n    useEffect(() => {\r\n        const storedUsers = getUsersLS();\r\n        \r\n        // Formatear los datos para el DynamicDataGrid\r\n        const mappedUsers = storedUsers.map((user, index) => ({\r\n            ID: user.rut || index + 1, // Usar RUT como ID principal si existe\r\n            Nombre: user.nombre,\r\n            Apellido: user.apellido,\r\n            Correo: user.email || user.correo,\r\n            Rol: user.rol || user.tipoUsuario || 'cliente'\r\n            // NOTA: Para las acciones de Editar/Eliminar, se usaría un componente de celda personalizado.\r\n        }));\r\n\r\n        setUsers(mappedUsers);\r\n    }, []); // El array vacío [] asegura que solo se ejecuta una vez\r\n\r\n    // 3. Renderizado condicional\r\n    if (users.length === 0) {\r\n        return <p className=\"my-4 text-center text-danger\">No hay usuarios registrados en la base de datos (localStorage).</p>;\r\n    }\r\n\r\n    // 4. Renderizar el DynamicDataGrid con los datos del estado\r\n    return (\r\n        <div>\r\n            <DynamicDataGrid \r\n                data={users} \r\n                title=\"Lista de Usuarios\" \r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserTable;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,eAAe,MAAM,mBAAmB,CAAC;AAChD,SAASC,UAAU,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMS,WAAW,GAAGP,UAAU,CAAC,CAAC;;IAEhC;IACA,MAAMQ,WAAW,GAAGD,WAAW,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MAClDC,EAAE,EAAEF,IAAI,CAACG,GAAG,IAAIF,KAAK,GAAG,CAAC;MAAE;MAC3BG,MAAM,EAAEJ,IAAI,CAACK,MAAM;MACnBC,QAAQ,EAAEN,IAAI,CAACO,QAAQ;MACvBC,MAAM,EAAER,IAAI,CAACS,KAAK,IAAIT,IAAI,CAACU,MAAM;MACjCC,GAAG,EAAEX,IAAI,CAACY,GAAG,IAAIZ,IAAI,CAACa,WAAW,IAAI;MACrC;IACJ,CAAC,CAAC,CAAC;IAEHjB,QAAQ,CAACE,WAAW,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,IAAIH,KAAK,CAACmB,MAAM,KAAK,CAAC,EAAE;IACpB,oBAAOtB,OAAA;MAAGuB,SAAS,EAAC,8BAA8B;MAAAC,QAAA,EAAC;IAA+D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAC1H;;EAEA;EACA,oBACI5B,OAAA;IAAAwB,QAAA,eACIxB,OAAA,CAACH,eAAe;MACZgC,IAAI,EAAE1B,KAAM;MACZ2B,KAAK,EAAC;IAAmB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAnCID,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}